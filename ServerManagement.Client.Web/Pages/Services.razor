@page "/services"

@using ServerManagement.Core.Requests.Services;
@using ServerManagement.Core.Responses.Services;
@inject MediatR.IMediator Mediator;

<h1>Services</h1>

@if (services == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th></th>
                <th>Display Name</th>
                <th>State</th>
                <th>Startup Type</th>
                <th>Run As</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var service in services)
            {
                <tr>
                    <td>
                        <div>
                            <button type="button" class="btn btn-outline-secondary btn-sm" 
                                    @onclick="e => this.showActionMenu=!this.showActionMenu "
                                    data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                <span class="oi oi-ellipses"></span>
                            </button>
                            <div class="dropdown-menu @(showActionMenu? "show":"")" >
                                <input type="button" class="dropdown-item" @onclick="e => StopService(service)" value="Stop Service" />
                                <input type="button" class="dropdown-item" @onclick="e => StartService(service)" value="Start Service" />
                            </div>
                        </div>
                    </td>
                    <td>@service.DisplayName</td>
                    <td class="@classState(service.State)">@service.State</td>
                    <td>@service.StartupType</td>
                    <td>@service.LogOnAs</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Service> services;

    protected override async Task OnInitializedAsync()
    {
        services = await Mediator.Send(new GetServiceList());
    }

    public string classState(string state)
    {
        switch (state)
        {
            case "Running":
                return "text-success";
            case "Stopped":
                return "text-danger";
            default:
                return null;
        }
    }

    private bool showActionMenu;

    private void StopService(Service service)
    {
        var state = Mediator.Send(new StopServiceRequest() { ServiceName = service.DisplayName });
        service.State = state.Result.ToString();
        showActionMenu = false;
    }

    private void StartService(Service service)
    {
        var state = Mediator.Send(new StartServiceRequest() { ServiceName = service.DisplayName });
        service.State = state.Result.ToString();
        showActionMenu = false;
    }
}
