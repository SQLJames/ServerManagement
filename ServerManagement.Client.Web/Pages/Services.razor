@page "/services"

@using ServerManagement.Core.Requests.Services;
@inject MediatR.IMediator Mediator;

<h1>Services</h1>

@if (services == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th></th>
                <th>Display Name</th>
                <th>State</th>
                <th>Startup Type</th>
                <th>Run As</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var service in services)
            {
            <tr>
                <td>
                    <div>
                        <button type="button" class="btn btn-outline-secondary btn-sm" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            <span class="oi oi-ellipses"></span>
                        </button>
                        <div class="dropdown-menu">
                            <a class="dropdown-item" href="#">Action</a>
                            <a class="dropdown-item" href="#">Another action</a>
                            <a class="dropdown-item" href="#">Something else here</a>
                            <div class="dropdown-divider"></div>
                            <a class="dropdown-item" href="#">Separated link</a>
                        </div>
                    </div>
                </td>
                <td>@service.DisplayName</td>
                <td class="@classState(service.State)">@service.State</td>
                <td>@service.StartupType</td>
                <td>@service.LogOnAs</td>
            </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<ServerManagement.Core.Responses.Services.Service> services;

    protected override async Task OnInitializedAsync()
    {
        services = await Mediator.Send(new GetServiceList());
    }

    public string classState(string state)
    {
        switch (state)
        {
            case "Running":
                return "text-success";
            case "Stopped":
                return "text-danger";
            default:
                return null;
        }
    }
}
